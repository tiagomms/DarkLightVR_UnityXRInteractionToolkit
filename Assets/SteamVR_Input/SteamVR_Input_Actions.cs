// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Boolean p_default_InteractUI;
        
        private static SteamVR_Action_Boolean p_default_Teleport;
        
        private static SteamVR_Action_Boolean p_default_GrabPinch;
        
        private static SteamVR_Action_Boolean p_default_GrabGrip;
        
        private static SteamVR_Action_Pose p_default_Pose;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonRightHand;
        
        private static SteamVR_Action_Single p_default_Squeeze;
        
        private static SteamVR_Action_Boolean p_default_VoiceInput;
        
        private static SteamVR_Action_Boolean p_default_SelectionRay;
        
        private static SteamVR_Action_Boolean p_default_CancelSelection;
        
        private static SteamVR_Action_Boolean p_default_ExtraMenu;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Vector2 p_platformer_Move;
        
        private static SteamVR_Action_Boolean p_platformer_Jump;
        
        private static SteamVR_Action_Vector2 p_buggy_Steering;
        
        private static SteamVR_Action_Single p_buggy_Throttle;
        
        private static SteamVR_Action_Boolean p_buggy_Brake;
        
        private static SteamVR_Action_Boolean p_buggy_Reset;
        
        private static SteamVR_Action_Boolean p_darkLightVR_InteractUI;
        
        private static SteamVR_Action_Boolean p_darkLightVR_Teleport;
        
        private static SteamVR_Action_Boolean p_darkLightVR_GrabPinch;
        
        private static SteamVR_Action_Boolean p_darkLightVR_GrabGrip;
        
        private static SteamVR_Action_Pose p_darkLightVR_Pose;
        
        private static SteamVR_Action_Skeleton p_darkLightVR_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_darkLightVR_SkeletonRightHand;
        
        private static SteamVR_Action_Single p_darkLightVR_Squeeze;
        
        private static SteamVR_Action_Boolean p_darkLightVR_VoiceInput;
        
        private static SteamVR_Action_Boolean p_darkLightVR_SelectionRay;
        
        private static SteamVR_Action_Boolean p_darkLightVR_CancelSelection;
        
        private static SteamVR_Action_Boolean p_darkLightVR_ExtraMenu;
        
        private static SteamVR_Action_Vibration p_darkLightVR_Haptic;
        
        public static SteamVR_Action_Boolean default_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_default_InteractUI.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_Teleport
        {
            get
            {
                return SteamVR_Actions.p_default_Teleport.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabPinch
        {
            get
            {
                return SteamVR_Actions.p_default_GrabPinch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabGrip
        {
            get
            {
                return SteamVR_Actions.p_default_GrabGrip.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_Pose
        {
            get
            {
                return SteamVR_Actions.p_default_Pose.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonLeftHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonRightHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Single default_Squeeze
        {
            get
            {
                return SteamVR_Actions.p_default_Squeeze.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean default_VoiceInput
        {
            get
            {
                return SteamVR_Actions.p_default_VoiceInput.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_SelectionRay
        {
            get
            {
                return SteamVR_Actions.p_default_SelectionRay.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_CancelSelection
        {
            get
            {
                return SteamVR_Actions.p_default_CancelSelection.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_ExtraMenu
        {
            get
            {
                return SteamVR_Actions.p_default_ExtraMenu.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy <SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Vector2 platformer_Move
        {
            get
            {
                return SteamVR_Actions.p_platformer_Move.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean platformer_Jump
        {
            get
            {
                return SteamVR_Actions.p_platformer_Jump.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 buggy_Steering
        {
            get
            {
                return SteamVR_Actions.p_buggy_Steering.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Single buggy_Throttle
        {
            get
            {
                return SteamVR_Actions.p_buggy_Throttle.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Brake
        {
            get
            {
                return SteamVR_Actions.p_buggy_Brake.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Reset
        {
            get
            {
                return SteamVR_Actions.p_buggy_Reset.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_InteractUI.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_Teleport
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_Teleport.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_GrabPinch
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_GrabPinch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_GrabGrip
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_GrabGrip.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose darkLightVR_Pose
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_Pose.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton darkLightVR_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_SkeletonLeftHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton darkLightVR_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_SkeletonRightHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Single darkLightVR_Squeeze
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_Squeeze.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_VoiceInput
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_VoiceInput.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_SelectionRay
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_SelectionRay.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_CancelSelection
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_CancelSelection.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean darkLightVR_ExtraMenu
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_ExtraMenu.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration darkLightVR_Haptic
        {
            get
            {
                return SteamVR_Actions.p_darkLightVR_Haptic.GetCopy <SteamVR_Action_Vibration>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_VoiceInput,
                    SteamVR_Actions.default_SelectionRay,
                    SteamVR_Actions.default_CancelSelection,
                    SteamVR_Actions.default_ExtraMenu,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.darkLightVR_InteractUI,
                    SteamVR_Actions.darkLightVR_Teleport,
                    SteamVR_Actions.darkLightVR_GrabPinch,
                    SteamVR_Actions.darkLightVR_GrabGrip,
                    SteamVR_Actions.darkLightVR_Pose,
                    SteamVR_Actions.darkLightVR_SkeletonLeftHand,
                    SteamVR_Actions.darkLightVR_SkeletonRightHand,
                    SteamVR_Actions.darkLightVR_Squeeze,
                    SteamVR_Actions.darkLightVR_VoiceInput,
                    SteamVR_Actions.darkLightVR_SelectionRay,
                    SteamVR_Actions.darkLightVR_CancelSelection,
                    SteamVR_Actions.darkLightVR_ExtraMenu,
                    SteamVR_Actions.darkLightVR_Haptic};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_VoiceInput,
                    SteamVR_Actions.default_SelectionRay,
                    SteamVR_Actions.default_CancelSelection,
                    SteamVR_Actions.default_ExtraMenu,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.darkLightVR_InteractUI,
                    SteamVR_Actions.darkLightVR_Teleport,
                    SteamVR_Actions.darkLightVR_GrabPinch,
                    SteamVR_Actions.darkLightVR_GrabGrip,
                    SteamVR_Actions.darkLightVR_Pose,
                    SteamVR_Actions.darkLightVR_SkeletonLeftHand,
                    SteamVR_Actions.darkLightVR_SkeletonRightHand,
                    SteamVR_Actions.darkLightVR_Squeeze,
                    SteamVR_Actions.darkLightVR_VoiceInput,
                    SteamVR_Actions.darkLightVR_SelectionRay,
                    SteamVR_Actions.darkLightVR_CancelSelection,
                    SteamVR_Actions.darkLightVR_ExtraMenu};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[]
            {
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.darkLightVR_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[]
            {
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.darkLightVR_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[]
            {
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.darkLightVR_Pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_VoiceInput,
                    SteamVR_Actions.default_SelectionRay,
                    SteamVR_Actions.default_CancelSelection,
                    SteamVR_Actions.default_ExtraMenu,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.darkLightVR_InteractUI,
                    SteamVR_Actions.darkLightVR_Teleport,
                    SteamVR_Actions.darkLightVR_GrabPinch,
                    SteamVR_Actions.darkLightVR_GrabGrip,
                    SteamVR_Actions.darkLightVR_VoiceInput,
                    SteamVR_Actions.darkLightVR_SelectionRay,
                    SteamVR_Actions.darkLightVR_CancelSelection,
                    SteamVR_Actions.darkLightVR_ExtraMenu};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[]
            {
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.darkLightVR_Squeeze};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[]
            {
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.buggy_Steering};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[]
            {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.darkLightVR_SkeletonLeftHand,
                    SteamVR_Actions.darkLightVR_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_VoiceInput,
                    SteamVR_Actions.default_SelectionRay,
                    SteamVR_Actions.default_CancelSelection,
                    SteamVR_Actions.default_ExtraMenu,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.darkLightVR_InteractUI,
                    SteamVR_Actions.darkLightVR_Teleport,
                    SteamVR_Actions.darkLightVR_GrabPinch,
                    SteamVR_Actions.darkLightVR_GrabGrip,
                    SteamVR_Actions.darkLightVR_Squeeze,
                    SteamVR_Actions.darkLightVR_VoiceInput,
                    SteamVR_Actions.darkLightVR_SelectionRay,
                    SteamVR_Actions.darkLightVR_CancelSelection,
                    SteamVR_Actions.darkLightVR_ExtraMenu};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/InteractUI")));
            SteamVR_Actions.p_default_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/Teleport")));
            SteamVR_Actions.p_default_GrabPinch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/GrabPinch")));
            SteamVR_Actions.p_default_GrabGrip = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/GrabGrip")));
            SteamVR_Actions.p_default_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/default/in/Pose")));
            SteamVR_Actions.p_default_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/default/in/SkeletonLeftHand")));
            SteamVR_Actions.p_default_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/default/in/SkeletonRightHand")));
            SteamVR_Actions.p_default_Squeeze = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/default/in/Squeeze")));
            SteamVR_Actions.p_default_VoiceInput = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/VoiceInput")));
            SteamVR_Actions.p_default_SelectionRay = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/SelectionRay")));
            SteamVR_Actions.p_default_CancelSelection = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/CancelSelection")));
            SteamVR_Actions.p_default_ExtraMenu = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/ExtraMenu")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create <SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_platformer_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/platformer/in/Move")));
            SteamVR_Actions.p_platformer_Jump = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/platformer/in/Jump")));
            SteamVR_Actions.p_buggy_Steering = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/buggy/in/Steering")));
            SteamVR_Actions.p_buggy_Throttle = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/buggy/in/Throttle")));
            SteamVR_Actions.p_buggy_Brake = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/buggy/in/Brake")));
            SteamVR_Actions.p_buggy_Reset = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/buggy/in/Reset")));
            SteamVR_Actions.p_darkLightVR_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/InteractUI")));
            SteamVR_Actions.p_darkLightVR_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/Teleport")));
            SteamVR_Actions.p_darkLightVR_GrabPinch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/GrabPinch")));
            SteamVR_Actions.p_darkLightVR_GrabGrip = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/GrabGrip")));
            SteamVR_Actions.p_darkLightVR_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/darkLightVR/in/Pose")));
            SteamVR_Actions.p_darkLightVR_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/darkLightVR/in/SkeletonLeftHand")));
            SteamVR_Actions.p_darkLightVR_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/darkLightVR/in/SkeletonRightHand")));
            SteamVR_Actions.p_darkLightVR_Squeeze = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/darkLightVR/in/Squeeze")));
            SteamVR_Actions.p_darkLightVR_VoiceInput = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/VoiceInput")));
            SteamVR_Actions.p_darkLightVR_SelectionRay = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/SelectionRay")));
            SteamVR_Actions.p_darkLightVR_CancelSelection = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/CancelSelection")));
            SteamVR_Actions.p_darkLightVR_ExtraMenu = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/darkLightVR/in/ExtraMenu")));
            SteamVR_Actions.p_darkLightVR_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create <SteamVR_Action_Vibration>("/actions/darkLightVR/out/Haptic")));
        }
    }
}
